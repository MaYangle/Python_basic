# 给你一个非负整数数组 nums ，你最初位于数组的第一个下标。数组中的每个元素代表你在该位置可以跳跃的最大长度。
# 判断你是否能够到达最后一个下标，如果可以，返回 true；否则，返回 false。

# 示例 1：
nums = [2,3,1,1,4]  # 输入
# 输出：true
# 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

# 示例 2：
nums = [3,2,1,0,4]  # 输入
# 输出：false
# 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        # 贪心算法就很聪明，如果你能到达最大的位置，那么就代表你在那之前的位置都可以到达
        # 所以如果我们想返回 最大的位置的话，我们只需判断 目前的位置是否在最大位置内容，并且当前位置加跳数是否大于最远位置
        # 大于的话就可以更新最远位置了
        # 最后想要确定是否大于最后一个下标 可以写max_id >= i 因为这个时候i已经是最大的下标了
        max_id = 0
        for i,jump in enumerate(nums):
            if max_id >= i and i + jump >= max_id: #如果当前位置能到达，并且当前位置+跳数>最远位置
                max_id = i + jump #更新最远能到达位置
        return max_id>=i