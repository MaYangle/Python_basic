# 给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。

# 示例
# 输入: nums = [1, 2, 3, 4, 5, 6, 7], k = 3
# 输出: [5, 6, 7, 1, 2, 3, 4]

# 示例
# 输入：nums = [-1, -100, 3, 99], k = 2
# 输出：[3, 99, -1, -100]

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        # 方法1 可以用数组POP弹出 然后insert插入
        # 因为pop始终是弹出数组末位的，insert可以选择插入位置  k是多少 就弹出插入多少 非常方便易懂
        # 缺点是时间复杂度较高，为 O(n * k)，因为每次插入和移除操作都是 O(n)。
        for _ in range(k):
            nums.insert(0,nums.pop())

        # 方法2 用切片的方法，把数组分割成两个部分，拼接好后再重新赋回给数组
        # 这样的好处是代码简洁且高效，时间复杂度为 O(n)，空间复杂度为 O(1)（除了用于切片的临时空间）。
        # 为了防止给的 k 比数组长度还要大 可以取 k除以数组长度的余数

        n = len(nums)
        #解释一下切片 加号左边就是 该rotate的倒数几个数 所以带负号
        nums[:] = nums[-k%n:] + nums[:-k%n]